/*
   Copyright 2017 Ryuichi Saito, LLC and the Yanagiba project contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

protocol Foo {}
@a @b @c protocol Foo {}
fileprivate protocol Foo {}
@a public protocol Foo {}
protocol Foo: String {}
protocol Foo {
  var bar: Bar { get }
}
protocol Foo {
  @a @b @c var bar: Bar { get }
}
protocol Foo {
  public var bar: Bar { get }
}
protocol Foo {
  @a @b @c public var bar: Bar { get }
}
protocol Foo {
  var bar: Bar {
    @a mutating get
    @b mutating set
  }
}
protocol Foo {
  @discardableResult public func foo<String>(a: A, b: B, c: C) where A: String
}
protocol Foo {
  @x @y public init<String>(a: A, b: B, c: C) throws where A: String
  @x @y public init?<String>(a: A, b: B, c: C) throws where A: String
  @x @y public init!<String>(a: A, b: B, c: C) throws where A: String
}
protocol Foo {
  @a fileprivate subscript(i: Int, j: Int) -> @b Self { set get }
}
protocol Foo {
  @a fileprivate associatedtype foo: Bar = bar
}
protocol Foo {
#if bar
  var bar: Bar { get }
#endif
}
protocol Foo {
  var a:A{get}
  @a func b(c: C) -> B
  init!(d: D)
  subscript(i: Int) -> E { get set }
  public associatedtype f: F = g
}
